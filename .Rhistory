first_year <- merge(first_year, Inleiding_en_Cognitie[,c(1,2)], all = TRUE)
first_year <- merge(first_year, Ontwikkelingspsychologie[,c(1,2)], all = TRUE)
first_year <- merge(first_year, Sociale_Psychologie[,c(1,2)], all = TRUE)
first_year <- merge(first_year, Klinische_en_Biologische_psychologie[,c(1,2)], all = TRUE)
first_year <- merge(first_year, Testtheorie[,c(1,2)], all = TRUE)
mean_grade_TT <- rep(NA, length(first_year$StudentID))
for (i in 1:length(mean_grade_TT)){
mean_grade_TT[i] <- weighted.mean(x = c(first_year$InleidingCognitie[i], first_year$OMS[i], first_year$Ontwikkeling[i], first_year$Social[i], first_year$KlinischBiologisch[i], first_year$Testtheorie[i]), y = c(12,12,6,12,12,6), na.rm = TRUE)
}
first_year$mean.gradeTT <- mean_grade_TT
mean_grade_NOTT <- rep(NA, length(first_year$StudentID))
for (i in 1:length(mean_grade_NOTT)){
mean_grade_NOTT[i] <- weighted.mean(x = c(first_year$InleidingCognitie[i], first_year$OMS[i], first_year$Ontwikkeling[i], first_year$Social[i], first_year$KlinischBiologisch[i]), y = c(12,12,6,12,12), na.rm = TRUE)
}
first_year$mean.gradeNOTT <- mean_grade_NOTT
#3 do the same for graduation dates
names(math)[names(math)=="StudentID"] <- "ID"
supertable2 <- merge(graduation, math, by = "ID")
#find starting date for each student
library(reshape2)
s <- Inleiding_en_Cognitie[order(Inleiding_en_Cognitie$`Grade date`),]
d <- reshape(s[,c(1,3,4)], timevar = "Catalogue ID", idvar = "StudentID", direction = "wide")
#merge with graduation dates
t20 <- which(supertable2$Studieniveau == "Bachelor")
graduation_bachelor <- supertable2[t20,]
names(d)[names(d)=="StudentID"] <- "ID"
graduation_bachelor <- merge(graduation_bachelor,d, by = "ID")
t30 <- which(supertable2$Studieniveau == "Propedeuse bachelor")
graduation_propedeuse <- supertable2[t30,]
graduation_propedeuse <- merge(graduation_propedeuse,d, by = "ID")
#tadaa
##some durations are still bullshit!!! maybe sort those out
graduation_bachelor$duration <- graduation_bachelor$`Graduation date` - graduation_bachelor$`Grade date.7201602PXT`
graduation_propedeuse$duration <- as.Date(graduation_propedeuse$`Graduation date`) - as.Date(graduation_propedeuse$`Grade date.7201602PXT`)
###work with those tables: first_year; OMS; WSET; graduation tables
getwd()
setwd("Users/Apple/Desktop/project")
library(readxl)
all_results <- read_xlsx("All results from 2010 - 2017(1).xlsx", col_types =
c("guess","guess","numeric","date","guess","guess","guess","guess","guess","guess","guess"))
graduation <- read_xls("Graduation Dates.xls")
math <- read_xlsx("SPSY_MATH_2010-2017.xlsx")
# 1) make supertable 2) select from supertable
#1)
all_results <- all_results[,c(1,3,4,6,7,8)]
graduation <- graduation[,c(1,2,7)]
math <- math[,c(1,4)] #only 729 unique entries, some appear more often
library(dplyr)
names(math)[names(math)=="X__1"] <- "StudentID"
names(math)[names(math)=="Externe beoord."] <- "math_grade"
supertable <- merge(all_results, math, by = "StudentID") #only 721 different students left
#2.1) make table for bachelor project
t01 <- which(supertable$`Catalogue ID` == "7203BPROXY")
t02 <- which(supertable$`Catalogue ID` == "7203BAT9XY")
t03 <- which(supertable$`Catalogue ID` == "7203BAT12Y")
t04 <- which(supertable$`Catalogue ID` == "7203BKO9XY")
t05 <- which(supertable$`Catalogue ID` == "7203BKO12Y")
t06 <- which(supertable$`Catalogue ID` == "7203BNT9XY")
t07 <- which(supertable$`Catalogue ID` == "7203BKT9XY")
t08 <- which(supertable$`Catalogue ID` == "7203BKT12Y")
t09 <- which(supertable$`Catalogue ID` == "7203BMT9XY")
t010 <- which(supertable$`Catalogue ID` == "7203BMT12Y")
t011 <- which(supertable$`Catalogue ID` == "7203BPT9XY")
t012 <- which(supertable$`Catalogue ID` == "7203BPT12Y")
t013 <- which(supertable$`Catalogue ID` == "7203BST12Y")
Bachelor <- supertable[c(t01,t02,t03,t04,t05,t06,t07,t08,t09,t010,t011,t012,t013),]
#2.2) make table for OMS
t <- which(supertable$`Catalogue ID` == "7201604PXT")
OMS <- supertable[t,] #includes also the failed grades; ECTS for this are 12
names(OMS)[names(OMS)=="Grade"] <- "OMS"
OMS <- OMS[order(OMS$StudentID,OMS$OMS, decreasing = TRUE, na.last = TRUE),]
OMS <- OMS[which(duplicated(OMS$StudentID) == FALSE),]
#2.3) make table for WSET
t1 <- which(supertable$`Catalogue ID` == "7202A609XT")
WSET <- supertable[t1,]
WSET <- WSET[order(WSET$StudentID,WSET$Grade, decreasing = TRUE, na.last = TRUE),]
WSET <- WSET[which(duplicated(WSET$StudentID) == FALSE),]
#2.4) make table for first year success
t2 <- which(supertable$`Catalogue ID` == "7201602PXT")
Inleiding_en_Cognitie <- supertable[t2,]
names(Inleiding_en_Cognitie)[names(Inleiding_en_Cognitie)=="Grade"] <- "InleidingCognitie"
Inleiding_en_Cognitie <- Inleiding_en_Cognitie[order(Inleiding_en_Cognitie$StudentID,Inleiding_en_Cognitie$InleidingCognitie, decreasing = TRUE, na.last = TRUE),]
Inleiding_en_Cognitie <- Inleiding_en_Cognitie[which(duplicated(Inleiding_en_Cognitie$StudentID) == FALSE),]
t3 <- which(supertable$`Catalogue ID` == "7201605PXT")
Ontwikkelingspsychologie <- supertable[t3,]
names(Ontwikkelingspsychologie)[names(Ontwikkelingspsychologie)=="Grade"] <- "Ontwikkeling"
Ontwikkelingspsychologie <- Ontwikkelingspsychologie[order(Ontwikkelingspsychologie$StudentID,Ontwikkelingspsychologie$Ontwikkeling, decreasing = TRUE, na.last = TRUE),]
Ontwikkelingspsychologie <- Ontwikkelingspsychologie[which(duplicated(Ontwikkelingspsychologie$StudentID) == FALSE),]
t4 <- which(supertable$`Catalogue ID` == "7201607PXT")
Sociale_Psychologie <- supertable[t4,]
names(Sociale_Psychologie)[names(Sociale_Psychologie)=="Grade"] <- "Social"
Sociale_Psychologie <- Sociale_Psychologie[order(Sociale_Psychologie$StudentID,Sociale_Psychologie$Social, decreasing = TRUE, na.last = TRUE),]
Sociale_Psychologie <- Sociale_Psychologie[which(duplicated(Sociale_Psychologie$StudentID) == FALSE),]
t5 <- which(supertable$`Catalogue ID` == "7201610PXT")
Klinische_en_Biologische_psychologie <- supertable[t5,]
names(Klinische_en_Biologische_psychologie)[names(Klinische_en_Biologische_psychologie)=="Grade"] <- "KlinischBiologisch"
Klinische_en_Biologische_psychologie <- Klinische_en_Biologische_psychologie[order(Klinische_en_Biologische_psychologie$StudentID,Klinische_en_Biologische_psychologie$KlinischBiologisch, decreasing = TRUE, na.last = TRUE),]
Klinische_en_Biologische_psychologie <- Klinische_en_Biologische_psychologie[which(duplicated(Klinische_en_Biologische_psychologie$StudentID) == FALSE),]
t6 <- which(supertable$`Catalogue ID` == "7201618PXT")
Testtheorie <- supertable[t6,]
names(Testtheorie)[names(Testtheorie)=="Grade"] <- "Testtheorie"
Testtheorie <- Testtheorie[order(Testtheorie$StudentID,Testtheorie$Testtheorie, decreasing = TRUE, na.last = TRUE),]
Testtheorie <- Testtheorie[which(duplicated(Testtheorie$StudentID) == FALSE),]
#investigate coding in original results
#make table first year; FIRST DELETE DOUBLE ENTRIES
first_year <- merge(OMS[,c(1,2,7)], Inleiding_en_Cognitie[,c(1,2)], by = "StudentID", all = TRUE)
first_year <- merge(first_year, Inleiding_en_Cognitie[,c(1,2)], all = TRUE)
first_year <- merge(first_year, Ontwikkelingspsychologie[,c(1,2)], all = TRUE)
first_year <- merge(first_year, Sociale_Psychologie[,c(1,2)], all = TRUE)
first_year <- merge(first_year, Klinische_en_Biologische_psychologie[,c(1,2)], all = TRUE)
first_year <- merge(first_year, Testtheorie[,c(1,2)], all = TRUE)
mean_grade_TT <- rep(NA, length(first_year$StudentID))
for (i in 1:length(mean_grade_TT)){
mean_grade_TT[i] <- weighted.mean(x = c(first_year$InleidingCognitie[i], first_year$OMS[i], first_year$Ontwikkeling[i], first_year$Social[i], first_year$KlinischBiologisch[i], first_year$Testtheorie[i]), y = c(12,12,6,12,12,6), na.rm = TRUE)
}
first_year$mean.gradeTT <- mean_grade_TT
mean_grade_NOTT <- rep(NA, length(first_year$StudentID))
for (i in 1:length(mean_grade_NOTT)){
mean_grade_NOTT[i] <- weighted.mean(x = c(first_year$InleidingCognitie[i], first_year$OMS[i], first_year$Ontwikkeling[i], first_year$Social[i], first_year$KlinischBiologisch[i]), y = c(12,12,6,12,12), na.rm = TRUE)
}
first_year$mean.gradeNOTT <- mean_grade_NOTT
#3 do the same for graduation dates
names(math)[names(math)=="StudentID"] <- "ID"
supertable2 <- merge(graduation, math, by = "ID")
#find starting date for each student
library(reshape2)
s <- Inleiding_en_Cognitie[order(Inleiding_en_Cognitie$`Grade date`),]
d <- reshape(s[,c(1,3,4)], timevar = "Catalogue ID", idvar = "StudentID", direction = "wide")
#merge with graduation dates
t20 <- which(supertable2$Studieniveau == "Bachelor")
graduation_bachelor <- supertable2[t20,]
names(d)[names(d)=="StudentID"] <- "ID"
graduation_bachelor <- merge(graduation_bachelor,d, by = "ID")
t30 <- which(supertable2$Studieniveau == "Propedeuse bachelor")
graduation_propedeuse <- supertable2[t30,]
graduation_propedeuse <- merge(graduation_propedeuse,d, by = "ID")
#tadaa
##some durations are still bullshit!!! maybe sort those out
graduation_bachelor$duration <- graduation_bachelor$`Graduation date` - graduation_bachelor$`Grade date.7201602PXT`
graduation_propedeuse$duration <- as.Date(graduation_propedeuse$`Graduation date`) - as.Date(graduation_propedeuse$`Grade date.7201602PXT`)
###work with those tables: first_year; OMS; WSET; graduation tables
setwd("Users/Apple/Desktop/project")
setwd("Users/Apple/Desktop")
getwd()
setwd("/Desktop")
library(readxl)
all_results <- read_xlsx("All results from 2010 - 2017(1).xlsx", col_types =
c("guess","guess","numeric","date","guess","guess","guess","guess","guess","guess","guess"))
graduation <- read_xls("Graduation Dates.xls")
math <- read_xlsx("SPSY_MATH_2010-2017.xlsx")
# 1) make supertable 2) select from supertable
#1)
all_results <- all_results[,c(1,3,4,6,7,8)]
graduation <- graduation[,c(1,2,7)]
math <- math[,c(1,4)] #only 729 unique entries, some appear more often
library(dplyr)
names(math)[names(math)=="X__1"] <- "StudentID"
names(math)[names(math)=="Externe beoord."] <- "math_grade"
supertable <- merge(all_results, math, by = "StudentID") #only 721 different students left
#2.1) make table for bachelor project
t01 <- which(supertable$`Catalogue ID` == "7203BPROXY")
t02 <- which(supertable$`Catalogue ID` == "7203BAT9XY")
t03 <- which(supertable$`Catalogue ID` == "7203BAT12Y")
t04 <- which(supertable$`Catalogue ID` == "7203BKO9XY")
t05 <- which(supertable$`Catalogue ID` == "7203BKO12Y")
t06 <- which(supertable$`Catalogue ID` == "7203BNT9XY")
t07 <- which(supertable$`Catalogue ID` == "7203BKT9XY")
t08 <- which(supertable$`Catalogue ID` == "7203BKT12Y")
t09 <- which(supertable$`Catalogue ID` == "7203BMT9XY")
t010 <- which(supertable$`Catalogue ID` == "7203BMT12Y")
t011 <- which(supertable$`Catalogue ID` == "7203BPT9XY")
t012 <- which(supertable$`Catalogue ID` == "7203BPT12Y")
t013 <- which(supertable$`Catalogue ID` == "7203BST12Y")
Bachelor <- supertable[c(t01,t02,t03,t04,t05,t06,t07,t08,t09,t010,t011,t012,t013),]
#2.2) make table for OMS
t <- which(supertable$`Catalogue ID` == "7201604PXT")
OMS <- supertable[t,] #includes also the failed grades; ECTS for this are 12
names(OMS)[names(OMS)=="Grade"] <- "OMS"
OMS <- OMS[order(OMS$StudentID,OMS$OMS, decreasing = TRUE, na.last = TRUE),]
OMS <- OMS[which(duplicated(OMS$StudentID) == FALSE),]
#2.3) make table for WSET
t1 <- which(supertable$`Catalogue ID` == "7202A609XT")
WSET <- supertable[t1,]
WSET <- WSET[order(WSET$StudentID,WSET$Grade, decreasing = TRUE, na.last = TRUE),]
WSET <- WSET[which(duplicated(WSET$StudentID) == FALSE),]
#2.4) make table for first year success
t2 <- which(supertable$`Catalogue ID` == "7201602PXT")
Inleiding_en_Cognitie <- supertable[t2,]
names(Inleiding_en_Cognitie)[names(Inleiding_en_Cognitie)=="Grade"] <- "InleidingCognitie"
Inleiding_en_Cognitie <- Inleiding_en_Cognitie[order(Inleiding_en_Cognitie$StudentID,Inleiding_en_Cognitie$InleidingCognitie, decreasing = TRUE, na.last = TRUE),]
Inleiding_en_Cognitie <- Inleiding_en_Cognitie[which(duplicated(Inleiding_en_Cognitie$StudentID) == FALSE),]
t3 <- which(supertable$`Catalogue ID` == "7201605PXT")
Ontwikkelingspsychologie <- supertable[t3,]
names(Ontwikkelingspsychologie)[names(Ontwikkelingspsychologie)=="Grade"] <- "Ontwikkeling"
Ontwikkelingspsychologie <- Ontwikkelingspsychologie[order(Ontwikkelingspsychologie$StudentID,Ontwikkelingspsychologie$Ontwikkeling, decreasing = TRUE, na.last = TRUE),]
Ontwikkelingspsychologie <- Ontwikkelingspsychologie[which(duplicated(Ontwikkelingspsychologie$StudentID) == FALSE),]
t4 <- which(supertable$`Catalogue ID` == "7201607PXT")
Sociale_Psychologie <- supertable[t4,]
names(Sociale_Psychologie)[names(Sociale_Psychologie)=="Grade"] <- "Social"
Sociale_Psychologie <- Sociale_Psychologie[order(Sociale_Psychologie$StudentID,Sociale_Psychologie$Social, decreasing = TRUE, na.last = TRUE),]
Sociale_Psychologie <- Sociale_Psychologie[which(duplicated(Sociale_Psychologie$StudentID) == FALSE),]
t5 <- which(supertable$`Catalogue ID` == "7201610PXT")
Klinische_en_Biologische_psychologie <- supertable[t5,]
names(Klinische_en_Biologische_psychologie)[names(Klinische_en_Biologische_psychologie)=="Grade"] <- "KlinischBiologisch"
Klinische_en_Biologische_psychologie <- Klinische_en_Biologische_psychologie[order(Klinische_en_Biologische_psychologie$StudentID,Klinische_en_Biologische_psychologie$KlinischBiologisch, decreasing = TRUE, na.last = TRUE),]
Klinische_en_Biologische_psychologie <- Klinische_en_Biologische_psychologie[which(duplicated(Klinische_en_Biologische_psychologie$StudentID) == FALSE),]
t6 <- which(supertable$`Catalogue ID` == "7201618PXT")
Testtheorie <- supertable[t6,]
names(Testtheorie)[names(Testtheorie)=="Grade"] <- "Testtheorie"
Testtheorie <- Testtheorie[order(Testtheorie$StudentID,Testtheorie$Testtheorie, decreasing = TRUE, na.last = TRUE),]
Testtheorie <- Testtheorie[which(duplicated(Testtheorie$StudentID) == FALSE),]
#investigate coding in original results
#make table first year; FIRST DELETE DOUBLE ENTRIES
first_year <- merge(OMS[,c(1,2,7)], Inleiding_en_Cognitie[,c(1,2)], by = "StudentID", all = TRUE)
first_year <- merge(first_year, Inleiding_en_Cognitie[,c(1,2)], all = TRUE)
first_year <- merge(first_year, Ontwikkelingspsychologie[,c(1,2)], all = TRUE)
first_year <- merge(first_year, Sociale_Psychologie[,c(1,2)], all = TRUE)
first_year <- merge(first_year, Klinische_en_Biologische_psychologie[,c(1,2)], all = TRUE)
first_year <- merge(first_year, Testtheorie[,c(1,2)], all = TRUE)
mean_grade_TT <- rep(NA, length(first_year$StudentID))
for (i in 1:length(mean_grade_TT)){
mean_grade_TT[i] <- weighted.mean(x = c(first_year$InleidingCognitie[i], first_year$OMS[i], first_year$Ontwikkeling[i], first_year$Social[i], first_year$KlinischBiologisch[i], first_year$Testtheorie[i]), y = c(12,12,6,12,12,6), na.rm = TRUE)
}
first_year$mean.gradeTT <- mean_grade_TT
mean_grade_NOTT <- rep(NA, length(first_year$StudentID))
for (i in 1:length(mean_grade_NOTT)){
mean_grade_NOTT[i] <- weighted.mean(x = c(first_year$InleidingCognitie[i], first_year$OMS[i], first_year$Ontwikkeling[i], first_year$Social[i], first_year$KlinischBiologisch[i]), y = c(12,12,6,12,12), na.rm = TRUE)
}
first_year$mean.gradeNOTT <- mean_grade_NOTT
#3 do the same for graduation dates
names(math)[names(math)=="StudentID"] <- "ID"
supertable2 <- merge(graduation, math, by = "ID")
#find starting date for each student
library(reshape2)
s <- Inleiding_en_Cognitie[order(Inleiding_en_Cognitie$`Grade date`),]
d <- reshape(s[,c(1,3,4)], timevar = "Catalogue ID", idvar = "StudentID", direction = "wide")
#merge with graduation dates
t20 <- which(supertable2$Studieniveau == "Bachelor")
graduation_bachelor <- supertable2[t20,]
names(d)[names(d)=="StudentID"] <- "ID"
graduation_bachelor <- merge(graduation_bachelor,d, by = "ID")
t30 <- which(supertable2$Studieniveau == "Propedeuse bachelor")
graduation_propedeuse <- supertable2[t30,]
graduation_propedeuse <- merge(graduation_propedeuse,d, by = "ID")
#tadaa
##some durations are still bullshit!!! maybe sort those out
graduation_bachelor$duration <- graduation_bachelor$`Graduation date` - graduation_bachelor$`Grade date.7201602PXT`
graduation_propedeuse$duration <- as.Date(graduation_propedeuse$`Graduation date`) - as.Date(graduation_propedeuse$`Grade date.7201602PXT`)
###work with those tables: first_year; OMS; WSET; graduation tables
setwd("Users/Apple/Desktop/project")
getwd()
setwd("Users/Apple/Desktop")
install.packages("tidyverse")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
library(nycflights13)
library(dplyr)
install.packages("dplyr")
library(nycflights13)
install.packages("nycflights13")
library(nycflights13)
filter(flights, month == 1, day == 1)
flights
filter(flights, month == 1)
flights[flights$month == 1 & flights$day == 1, ]
arrange(flights, year, month, day)
arrange(flights, year, month, day)
select(flights, year, month, day)
update.packages()
install.packages("nycflights13")
library(nycflights13)
libray(dplyr)
library(dplyr)
install.packages(dplyr)
install.packages("dplyr")
install.packages("tidyverse")
update.packages(checkBuilt = TRUE)
library(nycflights13)
install.packages("lme4")
install.packages("ltm")
packageStatus()
/Library/Frameworks/R.framework/Versions/2.15/Resources/library
install.packages('devtools') #assuming it is not already installed
library(devtools)
install_github('andreacirilloac/updateR')
flights
arrange(flights, year, month, day)
flights[flights$month == 1 & flights$day == 1, ]
library(nycflights13)
library(dplyr)
arrange(flights, year, month, day)
arrange(flights, desc(arr_delay))
select(flights, year:day)
summarise(flights,
delay = mean(dep_delay, na.rm = TRUE)
)
table2
table2
library(tidyverse)
table2
table2_cases <- filter(table2, type = "cases")
table2_cases <- filter(table2, type == "cases")
table2_cases
table2_cases <- filter(table2, type == "cases") %>%
rename(cases = count) %>%
arrange(country, year)
table2_cases
t2_cases <- filter(table2, type == "cases") %>%
rename(cases = count) %>%
arrange(country, year)
t2_cases
t2_population <- filter(table2, type == "population") %>%
rename(cases = count) %>%
arrange(country, year)
t2_population
t2_cases_per_cap <- t2_cases %>%
mutate(population = t2_population$population,
cases_per_cap = (cases / population) * 10000) %>%
select(country, year, cases_per_cap)
t2_cases_per_cap <- t2_cases %>%
mutate(population = t2_population$population,
cases_per_cap = (cases / population) * 10000) %>%
select(country, year, cases_per_cap)
t2_population$population
t2_population <- filter(table2, type == "population") %>%
rename(population = count) %>%
arrange(country, year)
t2_cases_per_cap <- t2_cases %>%
mutate(population = t2_population$population,
cases_per_cap = (cases / population) * 10000) %>%
select(country, year, cases_per_cap)
t2_cases_per_cap
t2_cases_per_cap <- t2_cases_per_cap %>%
mutate(type = "cases_per_cap") %>%
rename(count = cases_per_cap)
t2_cases_per_cap
stocks <- tibble(
year   = c(2015, 2015, 2016, 2016),
half  = c(   1,    2,     1,    2),
return = c(1.88, 0.59, 0.92, 0.17)
)
stocks
stocks
stocks %>%
spread(year, return) %>%
#gather("year", "return", `2015`:`2016`)
stocks
stocks %>%
spread(year, return)# %>%
df <- data.frame(x = c(NA, "a-b", "a-d", "b-c", "d-e"))
df
library(nycflights13)
airlines
flights
flights$origin
library("datamodelr")
install.packages("datamodelr")
Lahman::Batting
install.packages("Lahman")
Lahman::Batting
iris
versi = glm(Species == 'versicolor' ~ . - Species, data = iris, family = binomial)
setos = glm(Species == 'setosa' ~ . - Species, data = iris, family = binomial)
summary(versi)
summary(setos)
runif(5)/5
runif(5)
runif(5)
runif(3)
norm(2)
dir("..",recursive = T)
# Make sure to change this
setwd("/Users/Apple/Desktop/big data/youtube-personality")
library(tidyverse)
library(tidytext)
library(olsrr)
library(stringr)
"
Read in the CSV file
"
personality = as.tibble(read.csv("YouTube-Personality-Personality_impression_scores_train.csv",
encoding = "UTF-8",
sep = " "))
gender = as.tibble(read.csv("YouTube-Personality-gender.csv",
encoding = "UTF-8",
sep = " "))
audiovisual = as.tibble(read.csv("YouTube-Personality-audiovisual_features.csv",
encoding = "UTF-8",
sep = " "))
transcripts = as.tibble(read.csv("transcripts.csv",
encoding = "UTF-8",
sep = ","))
transcripts$index = as.character(transcripts$index)
transcripts =
transcripts %>%
rename(vlogId = index,
transcript = X0) %>%
mutate(vlogId = substr(vlogId, 1, nchar(vlogId)-4))
personality$vlogId = as.character(personality$vlogId)
gender$vlogId = as.character(gender$vlogId)
audiovisual$vlogId = as.character(audiovisual$vlogId)
training_data =
personality %>%
left_join(gender, on = c("vlogID" = "vlogID")) %>%
left_join(audiovisual, on = c("vlogID" = "vlogID")) %>%
left_join(transcripts, on = c("clogID" = "vlogID"))
#tokenization
training_data$transcript <- as.vector(training_data$transcript)
tidy_data <- training_data %>%
unnest_tokens(word, transcript, to_lower = TRUE) %>%
anti_join(get_stopwords())
View(tidy_data)
total_words <- tidy_data %>%
group_by(vlogId) %>%
count() %>%
rename(total_words = n)
View(total_words)
# Make sure to change this
setwd("/Users/Apple/Desktop/big data/youtube-personality")
library(tidyverse)
library(tidytext)
library(olsrr)
library(stringr)
"
Read in the CSV file
"
personality = as.tibble(read.csv("YouTube-Personality-Personality_impression_scores_train.csv",
encoding = "UTF-8",
sep = " "))
gender = as.tibble(read.csv("YouTube-Personality-gender.csv",
encoding = "UTF-8",
sep = " "))
audiovisual = as.tibble(read.csv("YouTube-Personality-audiovisual_features.csv",
encoding = "UTF-8",
sep = " "))
transcripts = as.tibble(read.csv("transcripts.csv",
encoding = "UTF-8",
sep = ","))
transcripts$index = as.character(transcripts$index)
transcripts =
transcripts %>%
rename(vlogId = index,
transcript = X0) %>%
mutate(vlogId = substr(vlogId, 1, nchar(vlogId)-4))
personality$vlogId = as.character(personality$vlogId)
gender$vlogId = as.character(gender$vlogId)
audiovisual$vlogId = as.character(audiovisual$vlogId)
training_data =
personality %>%
left_join(gender, on = c("vlogID" = "vlogID")) %>%
left_join(audiovisual, on = c("vlogID" = "vlogID")) %>%
left_join(transcripts, on = c("clogID" = "vlogID"))
#tokenization
training_data$transcript <- as.vector(training_data$transcript)
tidy_data <- training_data %>%
unnest_tokens(word, transcript, to_lower = TRUE) %>%
anti_join(get_stopwords())
#count the total number of words for each person
total_words <- tidy_data %>%
group_by(vlogId) %>%
count() %>%
rename(total_words = n)
#count the percentage of words related to big 5
words_E = c("bar","drinks", "restaurant", "dancing", "restaurants", "grandfather", "miami", "countless", "drinking", "shots", "girls", "glorious", "pool", "crowd", "sang", "grilled")
words_A = c("wonderful", "together", "visiting", "morning", "spring", "walked", "beautiful", "staying", "felt", "share", "gray", "joy", "afternoon", "day", "moments", "hug", "glad")
words_C = c("completed", "adventure", "adventures", "enjoying", "hawaii", "it's", "deck")
words_N = c("awful", "though", "lazy", "worse", "depressing", "irony", "terrible", "stressful", "horrible", "sort", "annoying", "ashamed", "ban")
words_O = c("folk", "humans", "of", "poet", "art", "by", "universe", "poetry", "narrative", "culture", "century", "sexual", "films", "novel", "decades", "ink", "passage", "literature", "blues")
words_nE = c("other", "cats", "computer", "minor")
words_nA = c("porn", "cost", "fuck")
words_nC = c("stupid", "boring", "desperate", "saying", "utter", "it's", "extreme")
words_nN = c("road", "southern", "visited", "ground", "oldest", "invited", "completed")
words_nO = c("giveaway")
check_words <- function(wordlist){
tidy_data %>%
filter(word %in% wordlist) %>%
group_by(vlogId) %>%
count() %>%
left_join(total_words) %>%
mutate(n/total_words) %>%
select(-n, -total_words)
}
E_words <- check_words(words_E) %>%
rename(words_Extraversion = 'n/total_words')
A_words <- check_words(words_A) %>%
rename(words_Agreeableness = 'n/total_words')
C_words <- check_words(words_C) %>%
rename(words_Conscientiousness = 'n/total_words')
N_words <- check_words(words_N) %>%
rename(words_Neuroticism = 'n/total_words')
O_words <- check_words(words_O) %>%
rename(words_Openness = 'n/total_words')
nE_words <- check_words(words_nE) %>%
rename(words_nExtraversion = 'n/total_words')
nA_words <- check_words(words_nA) %>%
rename(words_nAgreeableness = 'n/total_words')
nC_words <- check_words(words_nC) %>%
rename(words_nConscientiousness = 'n/total_words')
nN_words <- check_words(words_nN) %>%
rename(words_nNeuroticism = 'n/total_words')
nO_words <- check_words(words_nO) %>%
rename(words_nOpenness = 'n/total_words')
training_data %>% mutate(words_E)
nrc <- tidy_data %>%
inner_join(get_sentiments('nrc')) %>%
count(`vlogId`, sentiment) %>%
spread(sentiment, n, fill = 0)
